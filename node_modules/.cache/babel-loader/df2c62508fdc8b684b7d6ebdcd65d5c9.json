{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaooooojy\\\\Desktop\\\\project\\\\src\\\\map\\\\map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './map.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map() {\n  _s();\n\n  const ref = useRef(null);\n  useEffect(() => {\n    new WorldCovid(ref.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"map\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WHO Coronavirus (COVID-19) Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      children: \"            \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Map, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = Map;\n\nclass WorldCovid {\n  constructor(div) {\n    this.div = div;\n    this.getWH(d3.select(this.div));\n    this.addTip();\n    this.initMap();\n  }\n\n  getWH(node) {\n    this.width = node.node().getBoundingClientRect().width;\n    this.height = node.node().getBoundingClientRect().height;\n  }\n\n  addTip() {\n    d3.select(\"body\").selectAll('.d3-tip').data([0]).join(\"div\").attr(\"class\", \"d3-tip\").style(\"display\", \"none\");\n  } // 处理数据,获取最大日期的数据\n\n\n  async initData() {\n    this.world = await d3.json(\"./world.json\");\n    let covid = await d3.json(\"./data.json\");\n    covid.forEach(d => d.date = d3.timeParse(\"%Y-%W\")(d.year_week));\n    let cases = covid.filter(d => d.indicator === \"cases\");\n    let deaths = covid.filter(d => d.indicator !== \"cases\");\n    let maxDate = d3.groups(cases, d => d.country);\n    maxDate.forEach(d => {\n      d[2] = d3.max(d[1], v => v.date);\n    });\n    this.totalCovid_cases = cases.filter(d => {\n      return maxDate.find(v => v[0] === d.country && v[2] === d.date);\n    }); // 求deaths的最大日期数据\n\n    maxDate = d3.groups(deaths, d => d.country);\n    maxDate.forEach(d => {\n      d[2] = d3.max(d[1], v => v.date);\n    });\n    this.totalCovid_deaths = deaths.filter(d => {\n      return maxDate.find(v => v[0] === d.country && v[2] === d.date);\n    });\n    this.add_covid_to_map();\n  } // 将数据添加到地图里\n\n\n  add_covid_to_map() {\n    //联合covid和map数据\n    this.world.features.forEach(d => {\n      let values = this.totalCovid_cases.find(v => d.id === v.country_code);\n\n      if (values) {\n        var _values$cumulative_co;\n\n        d.cumulative_count = (_values$cumulative_co = values.cumulative_count) !== null && _values$cumulative_co !== void 0 ? _values$cumulative_co : 0;\n      }\n    });\n    this.world.features.forEach(d => {\n      let values = this.totalCovid_deaths.find(v => d.id === v.country_code);\n\n      if (values) {\n        var _values$cumulative_co2;\n\n        d.deaths = (_values$cumulative_co2 = values.cumulative_count) !== null && _values$cumulative_co2 !== void 0 ? _values$cumulative_co2 : 0;\n      }\n    });\n  } // 初始化svg容器\n\n\n  initSvg() {\n    this.svg = d3.select(this.div).append(\"svg\");\n    this.svg.attr(\"width\", \"100%\").attr(\"height\", \"750px\");\n  } // 初始化地图生成器\n\n\n  async initMap() {\n    await this.initData();\n    this.initSvg();\n    let worldGeoFeatures = this.world.features.filter(d => d.properties.name !== 'Antarctica'); // 去掉南极洲后的世界json数据\n\n    let worldNoATAGeo = {\n      type: \"FeatureCollection\",\n      features: worldGeoFeatures\n    };\n    let projection = d3.geoMercator() // .fitSize([this.width*0.7, this.height*0.7], this.world)\n    // .scale(100);\n    .fitExtent([[10, 30], [900, 850]], worldNoATAGeo).scale(150); // const projection = d3\n    //     .geoMercator()\n    //     .fitSize([this.width*0.7, this.height*0.7], this.world)\n    //     .scale(200);\n\n    this.path = d3.geoPath().projection(projection);\n    this.map = this.svg.append(\"g\");\n    this.drawMap();\n  } // 画地图\n\n\n  drawMap() {\n    let mapPath = this.map.selectAll(\"path\").data(this.world.features).join(\"path\").attr(\"d\", d => d.properties.name === \"Bermuda\" ? \"M 0,0\" : this.path(d));\n    const color = d3.scaleSqrt().domain([0, d3.max(this.totalCovid_cases, d => +d.cumulative_count)]).range([\"#95dcf4\", \"#007092\"]);\n    mapPath.attr(\"fill\", d => {\n      var _d$cumulative_count;\n\n      return color((_d$cumulative_count = d.cumulative_count) !== null && _d$cumulative_count !== void 0 ? _d$cumulative_count : 0);\n    }).attr(\"stroke\", \"gray\").attr(\"class\", d => d.properties.name).on(\"mouseenter\", (e, d) => {\n      this.tips_show(e, d);\n    }).on(\"mouseleave\", this.tips_hide);\n  }\n\n  tips_show(e, d) {\n    d3.select(\".d3-tip\").style(\"display\", \"block\").style(\"position\", \"absolute\").style(\"top\", `${e.y > this.height * 0.8 ? this.height * 0.8 : e.y}px`).style(\"left\", `${e.x}px`).html(() => ` <section>\n          <div>\n              <p><strong>${d.properties.name}</strong></p>\n              <p>cases:${d.cumulative_count}</p>\n              <p>deaths:${d.deaths}</p>\n            </div>\n          </section>`);\n  }\n\n  tips_hide() {\n    d3.select(\".d3-tip\").style(\"display\", \"none\");\n  }\n\n}\n\nexport default Map; // export default class Map extends Component {\n//     render() {\n//         return (<h1>\n//             欢迎，这里是map!!!!!!!!!!\n//         </h1>)\n//     }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["C:/Users/gaooooojy/Desktop/project/src/map/map.js"],"names":["React","useRef","useEffect","d3","Map","ref","WorldCovid","current","constructor","div","getWH","select","addTip","initMap","node","width","getBoundingClientRect","height","selectAll","data","join","attr","style","initData","world","json","covid","forEach","d","date","timeParse","year_week","cases","filter","indicator","deaths","maxDate","groups","country","max","v","totalCovid_cases","find","totalCovid_deaths","add_covid_to_map","features","values","id","country_code","cumulative_count","initSvg","svg","append","worldGeoFeatures","properties","name","worldNoATAGeo","type","projection","geoMercator","fitExtent","scale","path","geoPath","map","drawMap","mapPath","color","scaleSqrt","domain","range","on","e","tips_show","tips_hide","y","x","html"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport * as d3 from 'd3'\r\nimport './map.css'\r\n\r\nfunction Map() {\r\n\r\n    const ref = useRef(null)\r\n    useEffect(() => {\r\n        new WorldCovid(ref.current)\r\n    }, [])\r\n\r\n    return (\r\n        <section id=\"map\">\r\n            <h1>WHO Coronavirus (COVID-19) Dashboard</h1>\r\n            <div ref={ref}>            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nclass WorldCovid {\r\n\r\n    constructor(div) {\r\n        this.div = div\r\n        this.getWH(d3.select(this.div))\r\n        this.addTip()\r\n        this.initMap();\r\n    }\r\n    getWH(node) {\r\n        this.width = node.node().getBoundingClientRect().width;\r\n        this.height = node.node().getBoundingClientRect().height;\r\n    }\r\n    addTip() {\r\n        d3.select(\"body\").selectAll('.d3-tip').data([0])\r\n            .join(\"div\")\r\n            .attr(\"class\", \"d3-tip\")\r\n            .style(\"display\", \"none\");\r\n    }\r\n    // 处理数据,获取最大日期的数据\r\n    async initData() {\r\n        this.world = await d3.json(\"./world.json\");\r\n        let covid = await d3.json(\"./data.json\");\r\n\r\n        covid.forEach((d) => (d.date = d3.timeParse(\"%Y-%W\")(d.year_week)));\r\n        let cases = covid.filter((d) => d.indicator === \"cases\");\r\n        let deaths = covid.filter((d) => d.indicator !== \"cases\");\r\n\r\n        let maxDate = d3.groups(cases, (d) => d.country);\r\n        maxDate.forEach((d) => {\r\n            d[2] = d3.max(d[1], (v) => v.date);\r\n        });\r\n        this.totalCovid_cases = cases.filter((d) => {\r\n            return maxDate.find((v) => v[0] === d.country && v[2] === d.date);\r\n        });\r\n\r\n        // 求deaths的最大日期数据\r\n        maxDate = d3.groups(deaths, (d) => d.country);\r\n        maxDate.forEach((d) => {\r\n            d[2] = d3.max(d[1], (v) => v.date);\r\n        });\r\n        this.totalCovid_deaths = deaths.filter((d) => {\r\n            return maxDate.find((v) => v[0] === d.country && v[2] === d.date);\r\n        });\r\n        this.add_covid_to_map();\r\n    }\r\n    // 将数据添加到地图里\r\n    add_covid_to_map() {\r\n        //联合covid和map数据\r\n        this.world.features.forEach((d) => {\r\n            let values = this.totalCovid_cases.find((v) => d.id === v.country_code);\r\n            if (values) {\r\n                d.cumulative_count = values.cumulative_count ?? 0;\r\n            }\r\n        });\r\n\r\n        this.world.features.forEach((d) => {\r\n            let values = this.totalCovid_deaths.find((v) => d.id === v.country_code);\r\n            if (values) {\r\n                d.deaths = values.cumulative_count ?? 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    // 初始化svg容器\r\n    initSvg() {\r\n        this.svg = d3.select(this.div).append(\"svg\");\r\n        this.svg.attr(\"width\", \"100%\").attr(\"height\", \"750px\");\r\n    }\r\n    // 初始化地图生成器\r\n    async initMap() {\r\n        await this.initData();\r\n        this.initSvg();\r\n        let worldGeoFeatures = this.world.features.filter(d => d.properties.name!=='Antarctica')\r\n        // 去掉南极洲后的世界json数据\r\n        let worldNoATAGeo = {\r\n            type: \"FeatureCollection\",\r\n            features: worldGeoFeatures\r\n        }\r\n        let projection = d3.geoMercator()\r\n            // .fitSize([this.width*0.7, this.height*0.7], this.world)\r\n            // .scale(100);\r\n            .fitExtent([\r\n            [10,30],\r\n            [900, 850]\r\n        ], worldNoATAGeo)\r\n            .scale(150);\r\n        // const projection = d3\r\n        //     .geoMercator()\r\n        //     .fitSize([this.width*0.7, this.height*0.7], this.world)\r\n        //     .scale(200);\r\n        this.path = d3.geoPath().projection(projection);\r\n        this.map = this.svg.append(\"g\");\r\n        this.drawMap();\r\n    }\r\n\r\n    // 画地图\r\n    drawMap() {\r\n        let mapPath = this.map\r\n            .selectAll(\"path\")\r\n            .data(this.world.features)\r\n            .join(\"path\")\r\n            .attr(\"d\", (d) =>\r\n                d.properties.name === \"Bermuda\" ? \"M 0,0\" : this.path(d)\r\n            );\r\n\r\n        const color = d3\r\n            .scaleSqrt()\r\n            .domain([0, d3.max(this.totalCovid_cases, (d) => +d.cumulative_count)])\r\n            .range([\"#95dcf4\", \"#007092\"]);\r\n        mapPath\r\n            .attr(\"fill\", (d) => color(d.cumulative_count ?? 0))\r\n            .attr(\"stroke\", \"gray\")\r\n            .attr(\"class\", (d) => d.properties.name)\r\n            .on(\"mouseenter\", (e, d) => {\r\n                this.tips_show(e, d);\r\n            })\r\n            .on(\"mouseleave\", this.tips_hide);\r\n    }\r\n\r\n    tips_show(e, d) {\r\n        d3.select(\".d3-tip\")\r\n            .style(\"display\", \"block\")\r\n            .style(\"position\", \"absolute\")\r\n            .style(\"top\", `${e.y > this.height * 0.8 ? this.height * 0.8 : e.y}px`)\r\n            .style(\"left\", `${e.x}px`)\r\n            .html(\r\n                () => ` <section>\r\n          <div>\r\n              <p><strong>${d.properties.name}</strong></p>\r\n              <p>cases:${d.cumulative_count}</p>\r\n              <p>deaths:${d.deaths}</p>\r\n            </div>\r\n          </section>`\r\n            );\r\n    }\r\n    tips_hide() {\r\n        d3.select(\".d3-tip\").style(\"display\", \"none\");\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Map\r\n\r\n// export default class Map extends Component {\r\n//     render() {\r\n//         return (<h1>\r\n//             欢迎，这里是map!!!!!!!!!!\r\n//         </h1>)\r\n//     }\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"module"}